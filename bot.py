from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

TOKEN = "6935472754:AAGe6GRLmhosWSYLbN6Dgh-qpMQpgQxxEuE"
ADMIN_CHAT_ID = 5185045869
CHANNEL_USERNAME = "@Save_Ukraine_UA"

user_states = {}

def clean_text(text: str) -> str:
    import re
    text = re.sub(r'[\*_`]', '', text)
    return text.strip()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("\U0001F4E8 –ü–æ–¥–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é", callback_data="submit_petition")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("\U0001F44B –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text("\U0001F44B –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "submit_petition":
        caption = (
            "‚ùóÔ∏è –©–æ–± –º–∏ –æ–ø—É–±–ª—ñ–∫—É–≤–∞–ª–∏ –≤–∞—à—É –ø–µ—Ç–∏—Ü—ñ—é, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –æ–¥–Ω—É –∑ —É–º–æ–≤:\n"
            "1. –ü–æ—à–∏—Ä—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É —Å–µ—Ä–µ–¥ 15‚Äì20 –∑–Ω–∞–π–æ–º–∏—Ö.\n"
            "2. –ê–±–æ –ø—ñ–¥—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–æ–∑–≤–∏—Ç–æ–∫ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏.\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –Ω–∏–∂—á–µ."
        )
        keyboard = [
            [InlineKeyboardButton("\U0001F501 –ü–æ—à–∏—Ä–∏—Ç–∏ –≥—Ä—É–ø—É", callback_data="share_group")],
            [InlineKeyboardButton("\U0001F4B8 –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–≤–∏—Ç–æ–∫ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏", callback_data="donate")]
        ]
        await query.message.reply_text(caption, reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data in ["share_group", "donate"]:
        method = "–ü–æ—à–∏—Ä–µ–Ω–Ω—è –≥—Ä—É–ø–∏" if query.data == "share_group" else "–î–æ–Ω–∞—Ç"
        user_states[user_id] = {"step": "awaiting_proof", "method": method, "proof_photos": []}

        if query.data == "donate":
            text = (
                "–ú–∏ –≤–∂–µ –¥–≤–∞ —Ä–æ–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ —Ä–æ–∑–≤–∏–≤–∞—î–º–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ —Ç–∞ –∫–∞–Ω–∞–ª–∏, —è–∫—ñ –Ω–∞–±–ª–∏–∂–∞—é—Ç—å –Ω–∞—à—É –∫—Ä–∞—ó–Ω—É –¥–æ –ü–µ—Ä–µ–º–æ–≥–∏.\n"
                "–ß–∞—Å—Ç–∏–Ω–∞ –ø—Ä–∏–±—É—Ç–∫—É –∑ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü—ñ—ó –ö–∞–Ω–∞–ª—É –π–¥–µ –Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –ª—é–¥–µ–π, —è–∫—ñ —â–æ–¥–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å –∑–∞–¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞—à–∏–º –∑–∞—Ö–∏—Å–Ω–∏–∫–∞–º.\n"
                "–ê–ª–µ —â–æ–± —Ü—ñ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –ø—Ä–∏–Ω–æ—Å–∏–ª–∏ —â–µ –±—ñ–ª—å—à–µ –∫–æ—Ä–∏—Å—Ç—ñ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—Å—Ç—ñ–π–Ω–æ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏ –≤ —Ä–µ–∫–ª–∞–º—É.\n\n"
                "–°–∞–º–µ –¥–ª—è —Ü—å–æ–≥–æ –º–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –±–∞–Ω–∫—É –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É –ö–∞–Ω–∞–ª—É.\n\n"
                "\U0001F517 –ü–æ—Å–∏–ª–∞–Ω–Ω—è –±–∞–Ω–∫–∏: https://send.monobank.ua/jar/3fFzMioXwn\n"
                "\U0001F3E6 –ù–æ–º–µ—Ä –±–∞–Ω–∫–∏: 5375 4112 1778 2270\n\n"
                "<b>–°—É–º–∞ –¥–æ–Ω–∞—Ç—É –Ω–µ –≤–∞–∂–ª–∏–≤–∞ ‚Äî –≤–∞–∂–ª–∏–≤–æ, —è–∫ –≤–∏ –æ—Ü—ñ–Ω—é—î—Ç–µ –Ω–∞—à —á–∞—Å.</b>\n"
                "–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–£–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ'."
            )
            await query.message.reply_text(text, parse_mode="HTML")
        else:
            await query.message.reply_text(
                "\U0001F4E3 –ü–æ—à–∏—Ä—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É —Å–µ—Ä–µ–¥ –ª—é–¥–µ–π, –∑ —è–∫–∏–º–∏ –≤–∏ –æ–±–º—ñ–Ω—é–≤–∞–ª–∏—Å—å –ø—ñ–¥–ø–∏—Å–∞–º–∏ (10‚Äì15 —á–∞—Ç—ñ–≤).\n"
                "–°–∫–æ–ø—ñ—é–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –ø–æ—à–∏—Ä—Ç–µ:\n"
                "\U0001F517 https://t.me/Save_Ukraine_UA\n\n"
                "–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–£–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ'."
            )

        await query.message.reply_text(
            "–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –£–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ", callback_data="confirm_done")]])
        )

    elif query.data == "confirm_done":
        user_state = user_states.get(user_id, {})
        if user_state.get("proof_photos"):
            for photo in user_state["proof_photos"]:
                await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=photo)
            user_state["step"] = "awaiting_photo"
            await query.message.reply_text("‚úçÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ì–µ—Ä–æ—è.")
        else:
            await query.message.reply_text("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏, —è–∫—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–º–æ–≤–∏.")

async def handle_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    user_id = update.message.from_user.id
    user_state = user_states.setdefault(user_id, {})

    if user_state.get("step") == "awaiting_proof":
        user_state.setdefault("proof_photos", []).append(update.message.photo[-1].file_id)
        await update.message.reply_text("–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–£–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ'.")

    elif user_state.get("step") == "awaiting_photo":
        user_state["hero_photo"] = update.message.photo[-1].file_id
        user_state["step"] = "awaiting_hero_name"
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —ñ–º‚Äô—è —Ç–∞ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ –ì–µ—Ä–æ—è.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    user_id = update.message.from_user.id
    user_state = user_states.setdefault(user_id, {})
    text = update.message.text

    if user_state.get("step") == "awaiting_hero_name":
        user_state["hero_name"] = clean_text(text)
        user_state["step"] = "awaiting_petition_link"
        await update.message.reply_text("üîó –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–µ—Ç–∏—Ü—ñ—é.")

    elif user_state.get("step") == "awaiting_petition_link":
        user_state["petition_link"] = clean_text(text)
        user_state["step"] = "awaiting_exchange_contacts"
        await update.message.reply_text("üîÅ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è –æ–±–º—ñ–Ω—É –ø–µ—Ç–∏—Ü—ñ—è–º–∏.")

    elif user_state.get("step") == "awaiting_exchange_contacts":
        user_state["exchange_contacts"] = clean_text(text)
        user_state["step"] = "completed"

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é", callback_data=f"approve_{user_id}"),
                InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id}")
            ]
        ])

        caption = (
            f"üìù <b>–ì–µ—Ä–æ–π:</b> {user_state['hero_name']}\n"
            f"üîó <b>–ü–µ—Ç–∏—Ü—ñ—è:</b> {user_state['petition_link']}\n"
            f"üîÅ <b>–û–±–º—ñ–Ω:</b> {user_state['exchange_contacts']}\n\n"
            f"üîó <b>–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏:</b> https://t.me/Save_Ukraine_UA\n"
            f"üì£ <b>–ü–æ—à–∏—Ä—Ç–µ –ø–µ—Ç–∏—Ü—ñ—é ‚Äî –∫–æ–∂–µ–Ω –≥–æ–ª–æ—Å –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è!</b>"
        )

        message = await context.bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=user_state['hero_photo'],
            caption=caption,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        user_state['admin_message_id'] = message.message_id
        await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –ü–µ—Ç–∏—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")

async def handle_admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = int(data.split("_")[1])
    user_state = user_states.get(user_id)

    if not user_state:
        await query.edit_message_caption(caption=query.message.caption + "\n\n‚ö†Ô∏è –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=None, parse_mode="HTML")
        return

    if data.startswith("approve_"):
        await query.edit_message_caption(caption=query.message.caption + "\n\n‚úÖ –ü–µ—Ç–∏—Ü—ñ—é —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!", reply_markup=None, parse_mode="HTML")

        await context.bot.send_photo(
            chat_id=CHANNEL_USERNAME,
            photo=user_state['hero_photo'],
            caption=(
                f"üìù <b>–ì–µ—Ä–æ–π:</b> {user_state['hero_name']}\n"
                f"üîó <b>–ü–µ—Ç–∏—Ü—ñ—è:</b> {user_state['petition_link']}\n"
                f"üîÅ <b>–û–±–º—ñ–Ω:</b> {user_state['exchange_contacts']}\n\n"
                f"üîó <b>–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏:</b> https://t.me/Save_Ukraine_UA\n"
                f"üì£ <b>–ü–æ—à–∏—Ä—Ç–µ –ø–µ—Ç–∏—Ü—ñ—é ‚Äî –∫–æ–∂–µ–Ω –≥–æ–ª–æ—Å –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è!</b>"
            ),
            parse_mode="HTML"
        )

    elif data.startswith("reject_"):
        await query.edit_message_caption(caption=query.message.caption + "\n\n‚ùå –ü–µ—Ç–∏—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.", reply_markup=None, parse_mode="HTML")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons, pattern="^(submit_petition|share_group|donate|confirm_done)$"))
    app.add_handler(CallbackQueryHandler(handle_admin_buttons, pattern="^(approve_|reject_).*"))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photos))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()
